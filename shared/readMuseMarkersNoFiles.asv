function [MuseStruct]  = readMuseMarkersNoFiles(cfg,force)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% function readMuseMarkers
%
% Crawls and searches through patient- and recording-directories to
% extracts marker timings (time and samples) created by Muse. These can be
% used to create an overview of events (plotmarkers.m), segment data with
% FieldTrip (e.g. plotpeaks.m) and create artefact files for Spyking-Circus
% (writeSpykingCircusDeadFile.m). The resultant MuseStruct can be edited
% and written into a new markerfile for Muse with writeMuseMarkers.m
%
% Code by Stephen Whitmarsh (stephen.whitmarsh@gmail.com)
% with help from Jean-Didier Lemarechal & Craig Richter
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% warning('off','all');

fname = fullfile(cfg.datasavedir,sprintf('%sMuseStruct_%s.mat',cfg.prefix,cfg.os));

if exist(fname,'file') && force == false
    fprintf('***************************************\n');
    fprintf('** loading precomputed MuseStruct *****\n');
    fprintf('***************************************\n\n');
    load(fname,'MuseStruct');
else
    
    if force == true
        fprintf('**********************************************\n');
        fprintf('** forced redoing of MuseStruct creation *****\n');
        fprintf('**********************************************\n\n');
    else
        fprintf('****************************\n');
        fprintf('** creating MuseStruct *****\n');
        fprintf('****************************\n\n');
    end
    
    % Go through different parts
    for ipart = 1 : size(cfg.directorylist,2)
        
        % Go through directory list
        for idir = 1 : size(cfg.directorylist{ipart},2)
            
            fprintf('Extracting artefact timings from  %s \n',cfg.directorylist{ipart}{idir});
            
            % find muse event file
            temp        = dir(fullfile(cfg.rawdir,cfg.directorylist{ipart}{idir},'*.mrk'));
            name_mrk    = fullfile(cfg.rawdir,cfg.directorylist{ipart}{idir},temp.name);
            
            if ~exist(name_mrk,'file')
                error('%s not found', name_mrk);
            else
                fprintf('Found markerfile: %s \n',name_mrk);
            end
            
            % read muse event file
            f = fopen(name_mrk, 'rt');
            markfile = {};
            while true
                l = fgetl(f);
                if ~ischar(l)
                    break
                end
                markfile{end + 1} = l;
            end
            fclose(f);
            
            if ~isempty(markfile)
                nmarkers        = str2double(markfile{find(strcmp('NUMBER OF MARKERS:', markfile)) + 1});
                classgroupid    = markfile(find(strcmp('CLASSGROUPID:', markfile)) + 1);
                name            = markfile(find(strcmp('NAME:', markfile)) + 1);
                comment         = markfile(find(strcmp('COMMENT:', markfile)) + 1);
                color           = markfile(find(strcmp('COLOR:', markfile)) + 1);
                editable        = markfile(find(strcmp('EDITABLE:', markfile)) + 1);
                classid         = markfile(find(strcmp('CLASSID:', markfile)) + 1);
                nrEvents        = str2double(markfile(find(strcmp('NUMBER OF SAMPLES:', markfile)) + 1));
                
                for i = 1:length(nrEvents)
                    if nrEvents(i) > 0
                        fprintf('found %d occurances of %s \n', nrEvents(i), name{i});
                    end
                end
                
                % Get the events, time in seconds from onset of file
                j = find(strcmp('LIST OF SAMPLES:', markfile)) + 2;
                for i = 1 : nmarkers
                    marks{i} = str2num(char(markfile(j(i):j(i) + nrEvents(i) - 1)));
                    
                    % Convert from index origin 0 to 1
                    if nrEvents(i) ~= 0
                        marks{i}(:, 1) = marks{i}(:, 1) + 1;
                    end
                end
                
                % recover "real time" from first Neurlynx .txt file
                temp        = dir(fullfile(cfg.rawdir,cfg.directorylist{ipart}{idir},'*.ncs'));
                [~, f, ~]   = fileparts(temp(1).name);
                f           = fopen(fullfile(temp(1).folder,[f,'.txt']));
                clear timestring
                ftype       = 'none';
                while 1
                    tline = fgetl(f);
                    if ~ischar(tline), break, end
                    searchstring1 = '## Time Opened (m/d/y)';
                    searchstring2 = '-TimeCreated';
                    try
                        if length(tline) >= max(length(searchstring1))
                            if strcmp(tline(1:length(searchstring1)),searchstring1)
                                timestring = tline;
                                ftype = 1;
                                disp('Great, found timestamp in header file - Type 1');
                                break
                            end
                        end
                        if length(tline) >= max(length(searchstring2))
                            if strcmp(tline(1:length(searchstring2)),searchstring2)
                                timestring = tline;
                                ftype = 2;
                                disp('Great, found timestamp in header file - Type 2');
                                break
                            end
                        end
                    catch
                        disp('Warning: something weird happened reading the txt time');
                    end
                end
                fclose(f);
                
                % add real time of onset of file
                timestring = strsplit(timestring);
                switch ftype
                    case 1
                        headerdate = [cell2mat(timestring(5)) ' ' cell2mat(timestring(7))];
                        MuseStruct{ipart}{idir}.starttime  = datetime(headerdate,'Format','MM/dd/yy HH:mm:ss.SSS');
                        
                    case 2
                        headerdate = [cell2mat(timestring(2)) ' ' cell2mat(timestring(3))];
                        MuseStruct{ipart}{idir}.starttime  = datetime(headerdate,'Format','yy/MM/dd HH:mm:ss.SSS');
                end
                
                % create markers details in MuseStruct
                for imarker = 1 : nmarkers
                    name{imarker} = strrep(name{imarker},'-','_'); % cant make fieldnames with minusses
                    MuseStruct{ipart}{idir}.markers.(name{imarker}).events         = [];
                    MuseStruct{ipart}{idir}.markers.(name{imarker}).comment        = comment{imarker};
                    MuseStruct{ipart}{idir}.markers.(name{imarker}).color          = color{imarker};
                    MuseStruct{ipart}{idir}.markers.(name{imarker}).editable       = editable{imarker};
                    MuseStruct{ipart}{idir}.markers.(name{imarker}).classid        = classid{imarker};
                    MuseStruct{ipart}{idir}.markers.(name{imarker}).classgroupid   = classgroupid{imarker};
                    for ievent = 1 : nrEvents(imarker)
                        MuseStruct{ipart}{idir}.markers.(name{imarker}).trialnum                 = marks{imarker}(ievent,1);
                        MuseStruct{ipart}{idir}.markers.(name{imarker}).synctime(ievent)         = marks{imarker}(ievent,2);
                        MuseStruct{ipart}{idir}.markers.(name{imarker}).clock(ievent)            = seconds(marks{imarker}(ievent,2)) + MuseStruct{ipart}{idir}.starttime;                        
                    end
                end
            else
                fprintf('\n\n %s is empty!!! \n\n',name_mrk);
            end
        end
    end
    save(fname,'MuseStruct');
end
eval(sprintf('MuseStruct_%s = MuseStruct;',type));
